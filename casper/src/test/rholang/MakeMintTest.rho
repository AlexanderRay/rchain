//scalapackage coop.rchain.rholang.mint

//requires MakeMint, RhoSpec
new
  rl(`rho:registry:lookup`),
  setup,
  test1, test2, test3, test4,
  split, getBalance, deposit
in {
  contract setup(retCh) = {
    new MakeMintCh, mintACh, mintBCh in {
      rl!(`rho:id:exunyijimapk7z43g3bbr69awqdz54kyroj9q43jgu3dh567fxsftx`, *MakeMintCh) |
      for(@(_, MakeMint) <- MakeMintCh) {
        @MakeMint!(*mintACh) | @MakeMint!(*mintBCh) |
        for(mintA <- mintACh; mintB <- mintBCh) {
          retCh ! ((*mintA, *mintB))
        }
      }
    }
  } |

  contract test1(rhoSpec, @(mintA, mintB), ackCh) = {
    new aliceAPurse, bobBPurse, aliceAPurseBalance, bobBPurseBalance in {
      @mintA!("makePurse", 100, *aliceAPurse) |
      @mintB!("makePurse", 50, *bobBPurse) |
      for(aliceAPurse <- aliceAPurse; bobBPurse <- bobBPurse) {
        aliceAPurse!("getBalance", *aliceAPurseBalance) |
        bobBPurse!("getBalance", *bobBPurseBalance) |
        rhoSpec!("assertMany",
          [
            ((100, "== <-", *aliceAPurseBalance), "alice should have the initial balance"),
            ((50, "== <-", *bobBPurseBalance), "bob should have the initial balance")
          ], *ackCh)
      }
    }
  } |

  contract test2(rhoSpec, @(mintA, mintB), ackCh) = {
    new aliceAPurse, bobBPurse, ccDep1, ccDep2 in {
      @mintA!("makePurse", 100, *aliceAPurse) |
      @mintB!("makePurse", 50, *bobBPurse) |
      for(aliceAPurse <- aliceAPurse;
          bobBPurse <- bobBPurse) {
        aliceAPurse!("deposit", 10, *bobBPurse, *ccDep1) |
        bobBPurse!("deposit", 10, *aliceAPurse, *ccDep2) |
        rhoSpec!("assertMany",
          [
            ((false, *ccDep1), "deposit from bob to alice should fail"),
            ((false, *ccDep2), "deposit from alice to bob should fail")
          ], *ackCh)
      }
    }
  } |

  contract test3(rhoSpec, @(mintA, _), ackCh) = {
    new aliceAPurse, aliceAPurseBalance,
        bobAPurse, bobAPurseBalance,
        depositSuccess in {
      @mintA!("makePurse", 0, *aliceAPurse) |
      @mintA!("makePurse", 50, *bobAPurse) |
      for(aliceAPurse <- aliceAPurse;
          bobAPurse <- bobAPurse) {
        aliceAPurse!("deposit", 10, *bobAPurse, *depositSuccess) |
        for (@depositResult <- depositSuccess) {
          aliceAPurse!("getBalance", *aliceAPurseBalance) |
          bobAPurse!("getBalance", *bobAPurseBalance) |

          rhoSpec!("assertMany",
            [
              (depositResult, "deposit should succeed"),
              ((10, "== <-", *aliceAPurseBalance), "0 + 10 = 10"),
              ((40, "== <-", *bobAPurseBalance), "50 - 10 = 40"),
            ],
            *ackCh)
        }
      }
    }
  } |

  contract test4(rhoSpec, @(mintA, _), ackCh) = {
    new aliceAPurse, bobAPurse, aliceAPurse5,
        aliceAPurseBalance, aliceAPurse5Ch, aliceAPurse5Balance,
        splitFail, splitResult, failPurse in {
      @mintA!("makePurse", 50, *aliceAPurse) |
      for(aliceAPurse <- aliceAPurse) {
        aliceAPurse!("split", 500, *failPurse, *splitFail) |
        rhoSpec!("assert", (false, "== <-", *splitFail), "cannot split with more what you have") |

        aliceAPurse!("split", 5, *splitResult) |
        for (@[aliceAPurse5] <- splitResult) {
          aliceAPurse!("getBalance", *aliceAPurseBalance) |
          @aliceAPurse5!("getBalance", *aliceAPurse5Balance) |
          rhoSpec!("assertMany",
            [
              ((5, "== <-", *aliceAPurse5Balance), "0 + 5 = 5"),
              ((45, "== <-", *aliceAPurseBalance), "50 - 5 = 45")
            ],
            *ackCh
          )
        }
      }
    }
  } |

  new RhoSpecCh in {
    rl!(`rho:id:6wnujzcraztjfg941skrtbdkdgbko8nuaqihuhn15s66oz8ro5gwbb`, *RhoSpecCh) |
    for(@(_, RhoSpec) <- RhoSpecCh) {
      @RhoSpec!("testSuite", *setup,
        [
          ("Purses should be created with the given balance", *test1),
          // ("Cross-currency deposits should fail.", *test2)
          ("Deposit should work as expected", *test3),
          ("Split should work as expected", *test4)
        ])
    }
  }
//
//    contract test3(rhoSpec, (mintA, mintB), ackCh) = {
//    } |
//
//    contract test4(rhoSpec, (mintA, mintB), ackCh) = {
//    } |
//
//    @MakeMint!(*mintACh) | @MakeMint!(*mintBCh) |
//    for(mintA <- mintACh; mintB <- mintBCh) {
//      mintA!("makePurse", 100, *aliceAPurse) | mintB!("makePurse", 50, *bobBPurse) |
//      for(@aliceAPurse <- aliceAPurse; @bobBPurse <- bobBPurse) {
//        getBalance!(aliceAPurse, *aliceAPurseBalance) |
//        getBalance!(bobBPurse, *bobBPurseBalance) |
//        @TestSet!("define",
//          "Purses should be created with the given balance.",
//          [
//            [*aliceAPurseBalance, 100],
//            [*bobBPurseBalance, 50]
//          ],
//          *test1
//        ) |
//
//
//        @TestSet!("after", *test1, {
//          deposit!(aliceAPurse, 10, bobBPurse, *ccDep1) |
//          deposit!(bobBPurse, 10, aliceAPurse, *ccDep2) |
//          @TestSet!("define", //cannot deposit tokens across different mints
//            "Cross-currency deposits should fail.",
//            [
//              [*ccDep1, "hanging return"],
//              [*ccDep2, "hanging return"],
//            ],
//            *test2
//          )
//        }) |
//
//
//        @TestSet!("after", *test2, {
//          @aliceAPurse!("sprout", *bobAPurse) |
//          @bobBPurse!("sprout", *aliceBPurse) |
//          for(@aliceBPurse <- aliceBPurse; @bobAPurse <- bobAPurse) {
//            getBalance!(aliceBPurse, *aliceBPurseBalance) |
//            getBalance!(bobAPurse, *bobAPurseBalance) |
//            deposit!(aliceBPurse, 10, bobBPurse, *bDep) |
//            deposit!(bobAPurse, 20, aliceAPurse, *aDep1) |
//            deposit!(bobAPurse, 30, aliceAPurse, *aDep2) |
//            @TestSet!("define",
//              "Deposit should work as expected.",
//              [
//                [*bDep, true], //10 from Bob to Alice
//                [*aliceBPurseBalance, 10], //0 + 10 = 10
//                [*bobBPurseBalance, 40], // 50 - 10 = 40
//
//                [*aDep1, true], //20 from Alice to Bob
//                [*bobAPurseBalance, 20], //0 + 20 = 20
//                [*aliceAPurseBalance, 80], // 100 - 20 = 80
//
//                [*aDep2, true], //30 from Alice to Bob again
//                [*bobAPurseBalance, 50], //20 + 30 = 50
//                [*aliceAPurseBalance, 50], // 80 - 30 = 50
//              ],
//              *test3
//            )
//          } |
//
//          @TestSet!("after", *test3, {
//            split!(aliceAPurse, 500, *failPurse, *splitFail) |
//            @aliceAPurse!("split", 5, *aliceAPurse5Ch) |
//            for(@[aliceAPurse5] <- aliceAPurse5Ch){
//              aliceAPurse5Ch!([aliceAPurse5]) |
//              getBalance!(aliceAPurse5, *aliceAPurse5Balance) |
//              @TestSet!("define",
//                "Split should work as expected.",
//                [
//                  [*splitFail, false], //cannot split with more than you have
//                  [*aliceAPurse5Balance, 5], //0 + 5 = 5
//                  [*aliceAPurseBalance, 45] // 50 - 5 = 45
//                ],
//                *test4
//              )
//            }
//          })
//        })
//      }
//    }
}
