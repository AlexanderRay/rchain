//scalapackage coop.rchain.rholang.collection

new
  rl(`rho:registry:lookup`), EitherCh, RhoSpecCh,
  stdlog(`rho:io:stdlog`),
  double, divide, divide10By, divide8By,
  /* TestSetCh,
  double, divide, divide100by, divide50by, divide10by,
  divide8by, doubleMap, divide10byFlatMap, composeTest, */
  setup, test1, test2, test3
in {
  contract double(@x, ret) = { ret!(2 * x) } |
  contract divide(@x, @y, ret) = {
    if(y == 0) { ret!(("Left", "Div by zero!")) }
    else { ret!(("Right", x / y)) }
  } |
  contract divide10By(@divisor, ret) = { divide!(10, divisor, *ret)} |
  contract divide8By(@divisor, ret) = { divide! (8, divisor, *ret)} |

  stdlog!("info", "Starting EitherTest") |
  rl!(`rho:id:j6trahbxycumerwpr5qype7j43b7eqh8auebwsa9nn68if47gswh73`, *EitherCh) |
  rl!(`rho:id:6wnujzcraztjfg941skrtbdkdgbko8nuaqihuhn15s66oz8ro5gwbb`, *RhoSpecCh) |
  for(@(_, Either) <- EitherCh;
      @(_, RhoSpec) <- RhoSpecCh) {

    stdlog!("info", "Either & RhoSpec ready") |

    contract setup(returnCh) = {
      returnCh!([])
    } |

    contract test1(rhoSpec, _, ackCh) = {
      new ch1, ch2 in {
        @Either!("map", ("Left", "message"), *double, *ch1) |
        @Either!("map", ("Right", 3), *double, *ch2) |
        rhoSpec!("assertMany",
          [
            ((("Left", "message"), "== <-", *ch1), "Left values are not affected by map"),
            ((("Right", 6), "== <-", *ch2), "Right values are changed by map")
          ], *ackCh)
      }
    } |

    contract test2(rhoSpec, _, ackCh) = {
      new ch1, ch2, ch3 in {
        @Either!("flatMap", ("Left", "message"), *divide10By, *ch1) |
        @Either!("flatMap", ("Right", 2), *divide10By, *ch2) |
        @Either!("flatMap", ("Right", 0), *divide10By, *ch3) |
        rhoSpec!("assertMany",
          [
            ((("Left", "message"), "== <-", *ch1), "Left values are not affected by flatMap"),
            ((("Right", 5), "== <-", *ch2), "Right values are changed by flatMap"),
            ((("Left", "Div by zero!"), "== <-", *ch3), "Left values are returned on failure")
          ], *ackCh)
      }
    } |

    contract test3(rhoSpec, _, ackCh) = {
      new ch1, ch2, ch3, ch4 in {
        @Either!("compose", 1, [], *ch1) |
        @Either!("compose", 5, [*divide10By], *ch2) |
        @Either!("compose", 5, [*divide10By, *divide8By], *ch3) |
        @Either!("compose", 0, [*divide10By, *divide8By], *ch4) |
        rhoSpec!("assertMany",
          [
            ((("Right", 1), "== <-", *ch1), "empty function list behaves like pure"),
            ((("Right", 2), "== <-", *ch2), "Composing one function behaves like fmap . pure"),
            ((("Right", 4), "== <-", *ch3), "Composing two functions behaves like flatMap . pure"),
            ((("Left", "Div by zero!"), "== <-", *ch4), "Left values are propagated through compose")
          ], *ackCh)
      }
    } |

    @RhoSpec!("testSuite", *setup,
      [
        ("map should transform Right and preserve Left", *test1),
        ("flatMap should transform Right and preserve Left", *test2),
        ("compose should sequence Either-valued functions together", *test3)
      ])
  }
}
